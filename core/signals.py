from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import *
from .mistral import is_bad_review
from django.db.models.signals import m2m_changed
from .telegram import send_telegram_message

@receiver(post_save, sender=Review)
def check_review(sender, instance, created, **kwargs):
    # Created - —ç—Ç–æ —Ñ–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
    if created:
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
        instance.ai_checked_status = "ai_checked_in_progress"
        instance.save(update_fields=['ai_checked_status'])
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            if is_bad_review(instance.text):
                instance.ai_checked_status = "ai_cancelled"
                instance.is_published = False
            else:
                instance.ai_checked_status = "ai_checked_true"
                instance.is_published = True
                
            instance.save(update_fields=['ai_checked_status', 'is_published'])
        except Exception:
            instance.ai_checked_status = "ai_checked_false"
            instance.save(update_fields=['ai_checked_status'])


@receiver(m2m_changed, sender=Order.services.through)
def notify_new_order(sender, instance, action, **kwargs):

    if action == "post_add":
        services = "\n".join([f"- {service.name}" for service in instance.services.all()])
        
        message = (
            f"*–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!* üéâ\n"
            f"*–ö–ª–∏–µ–Ω—Ç:* {instance.client_name}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω:* `{instance.phone}`\n"
            f"*–ú–∞—Å—Ç–µ—Ä:* {instance.master.name if instance.master else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
            f"*–î–∞—Ç–∞:* {instance.appointment_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"*–£—Å–ª—É–≥–∏:*\n{services}"
        )
        
        send_telegram_message(message)            